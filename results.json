{"files": {"/home/devmessias/phd/pkgs/pyastrx-proj/pyastrx-my/tests/dummy_examples/builtin.py": {"1": {"code_context": [[1, "def foo(dict, list):"], [2, "    for key in dict:"], [3, "        list.append(key)"], [4, "    print(list)"]], "match_by_expr": {"//FunctionDef/args/arguments/args/Name[pyastrx:deny-list('built-in', @id)]": {"cols_by_line": {"1": [8, 14]}, "num_matches": 1}}}}, "/home/devmessias/phd/pkgs/pyastrx-proj/pyastrx-my/tests/dummy_examples/defaults.py": {"8": {"code_context": [[5, "    print(a, b)"], [6, ""], [7, ""], [8, "def should_catch(start_time, b=datetime.now()):"], [9, ""], [10, "    try:"], [11, "        print_func(start_time.timestamp(), b.timestamp())"]], "match_by_expr": {"//defaults/*[self::Dict or self::List or self::Set or self::Call]": {"cols_by_line": {"8": [31]}, "num_matches": 5}}}, "25": {"code_context": [[22, "    func(start_time.timestamp())"], [23, ""], [24, ""], [25, "def should_catch2(a=[], b={}):"], [26, "    try:"], [27, "        print(a, b)"], [28, "    except Exception as e:"]], "match_by_expr": {"//defaults/*[self::Dict or self::List or self::Set or self::Call]": {"cols_by_line": {"25": [20, 26]}, "num_matches": 5}}}, "37": {"code_context": [[34, "    def __init__(self, a=1):"], [35, "        self.a = a"], [36, ""], [37, "    def list_in_def(self, a=[2]):"], [38, "        return a"], [39, ""], [40, "    def set_in_def(self, a=set([1, 2, 3])):"]], "match_by_expr": {"//defaults/*[self::Dict or self::List or self::Set or self::Call]": {"cols_by_line": {"37": [28]}, "num_matches": 5}}}, "40": {"code_context": [[37, "    def list_in_def(self, a=[2]):"], [38, "        return a"], [39, ""], [40, "    def set_in_def(self, a=set([1, 2, 3])):"], [41, "        return a"], [42, ""], [43, "    def dict_in_def(self, a={'a': 1}):"]], "match_by_expr": {"//defaults/*[self::Dict or self::List or self::Set or self::Call]": {"cols_by_line": {"40": [27]}, "num_matches": 5}}}, "43": {"code_context": [[40, "    def set_in_def(self, a=set([1, 2, 3])):"], [41, "        return a"], [42, ""], [43, "    def dict_in_def(self, a={'a': 1}):"], [44, "        return a"]], "match_by_expr": {"//defaults/*[self::Dict or self::List or self::Set or self::Call]": {"cols_by_line": {"43": [28]}, "num_matches": 5}}}}, "/home/devmessias/phd/pkgs/pyastrx-proj/pyastrx-my/tests/dummy_examples/recursion.py": {"1": {"code_context": [[1, "def recursion_f(n):"], [2, "    if n == 0:"], [3, "        return 0"], [4, "    else:"]], "match_by_expr": {"//FunctionDef[@name=body//Call/func/Name/@id and not(parent::node()/parent::ClassDef)]": {"cols_by_line": {"1": [0]}, "num_matches": 4}}}, "11": {"code_context": [[8, "    recursion = a+b"], [9, "    return recursion"], [10, ""], [11, "def sub_recursion_f(a, b):"], [12, "    c = a+b"], [13, "    if c == 0:"], [14, "        return 0"]], "match_by_expr": {"//FunctionDef[@name=body//Call/func/Name/@id and not(parent::node()/parent::ClassDef)]": {"cols_by_line": {"11": [0]}, "num_matches": 4}}}, "21": {"code_context": [[18, ""], [19, ""], [20, "def subsub_recursion(a, b):"], [21, "    def recursion2_f(n):"], [22, "        if n == 0:"], [23, "            return 0"], [24, "        else:"]], "match_by_expr": {"//FunctionDef[@name=body//Call/func/Name/@id and not(parent::node()/parent::ClassDef)]": {"cols_by_line": {"21": [4]}, "num_matches": 4}}}, "46": {"code_context": [[43, "        else:"], [44, "            return n + _rec_class_fake(n-1)"], [45, "    def in_class(self, n):"], [46, "        def in_recursion_f(n):"], [47, "            if n == 0:"], [48, "                return 0"], [49, "            else:"]], "match_by_expr": {"//FunctionDef[@name=body//Call/func/Name/@id and not(parent::node()/parent::ClassDef)]": {"cols_by_line": {"46": [8]}, "num_matches": 4}}}}, "/home/devmessias/phd/pkgs/pyastrx-proj/pyastrx-my/tests/dummy_examples/var_names.py": {"9": {"code_context": [[6, "    return train"], [7, ""], [8, ""], [9, "def train(a, b, c):"], [10, "    e = 4"], [11, "    train = c+b"], [12, ""]], "match_by_expr": {"//FunctionDef[@name=body/Assign/targets/Name/@id]": {"cols_by_line": {"9": [0]}, "num_matches": 1}}}}}, "rules": {"//defaults/*[self::Dict or self::List or self::Set or self::Call]": {"name": "mutable-defaults", "description": "Can create bugs that are hard to find", "why": "bad practice", "severity": "error", "use_in_linter": true}, "//FunctionDef[@name=body/Assign/targets/Name/@id]": {"name": "redefinition-of-function-var", "description": "You should not define a new variable with the same name as the current function", "why": "bad practice", "severity": "warning", "use_in_linter": true}, "//FunctionDef[@name=body//Call/func/Name/@id and not(parent::node()/parent::ClassDef)]": {"name": "recursion", "description": "Recursion pattern detected in this file", "why": "should be refactored", "severity": "info", "use_in_linter": true}, "//FunctionDef/args/arguments/args/Name[pyastrx:deny-list('built-in', @id)]": {"name": "built-in-function-as-argument", "description": "This function uses a built-in function as argument", "why": "bad practice", "severity": "error", "use_in_linter": true}}}